/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	(function ($, window) {
	    __webpack_require__(1).setup();
	    __webpack_require__(2).setup();

	    if (document.querySelector('.Page-home')) {
	        __webpack_require__(3).start();
	    }

	    if (document.querySelector('.Page-environments')) {
	        __webpack_require__(4).setup();
	    }

	    $('pre code').each(function (i, block) {
	        hljs.highlightBlock(block);
	    });

	    $('.timestamp').each(function (i, e) {
	        var $e = $(e);
	        $e.html(moment($e.attr('title') + 'Z').fromNow());
	    });

	    if (!$("body").hasClass("no-katex")) {
	        $('.math').each(function (i, e) {
	            katex.render($(e).text().replace("\\(", "").replace("\\)", ""), e);
	        });
	    }
	}).call(undefined, jQuery, window);

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = { setup: function setup() {

	    $('.GlobalFooter-mobileNav-open').click(function () {
	      $('.GlobalNav-site').addClass('GlobalNav-site--mobile-Visible');
	    });

	    $('.GlobalFooter-mobileNav-close').click(function () {
	      $('.GlobalNav-site').removeClass('GlobalNav-site--mobile-Visible');
	    });
	  } };

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	"use strict";

	module.exports = { setup: setup };

	var n = 0;

	function setup() {
	  var dynamics;
	  dynamics = [];
	  $("[data-video-type]").each(function () {
	    var meta, url, vidtype;
	    vidtype = $(this).data("video-type");
	    url = $(this).data('video-source');
	    meta = $(this).data('video-meta');
	    switch (vidtype) {
	      case 'video/vnd.openai.ansivid-collection':
	        return render_ansi_video(this, url);
	      case 'video/mp4':
	        if ($(this).data('force-play')) {
	          return play_html5_video(this, url, vidtype, meta);
	        } else {
	          return dynamics.push(this);
	        }
	        break;
	      default:
	        return console.error("Unknown video type " + vidtype);
	    }
	  });
	  if (dynamics.length > 0) {
	    return initResponsiveVideoSwaps(dynamics, function (video, visible_now) {
	      var meta, url, vidtype;
	      vidtype = $(video).data('video-type');
	      url = $(video).data('video-source');
	      meta = $(video).data('video-meta');
	      if (visible_now) {
	        return play_html5_video(video, url, vidtype, meta);
	      } else {
	        return pause_html5_video(video);
	      }
	    });
	  }
	};

	function render_ansi_video(el, url) {
	  var id;
	  n += 1;
	  id = "rendered_ansi_video_" + n;
	  $(el).attr('id', id);
	  return $.get(url, {}, function (data) {
	    var clip, clips, combined, ep_id, ev, i, j, seen_duration;
	    clips = JSON.parse(data).clips;
	    combined = clips[0].video;
	    seen_duration = combined.duration;
	    i = 1;
	    while (i < clips.length) {
	      ep_id = clips[i].episode_id;
	      if (!ep_id) {
	        ep_id = i + 1;
	      }
	      combined.stdout.push([3, String.fromCharCode(27) + "[2J\x1B[1;1H===========\r\nEpisode " + ep_id + "\r\n===========\r\n"]);
	      seen_duration += 2 + 3;
	      clip = clips[i].video;
	      j = 0;
	      while (j < clip.stdout.length) {
	        ev = clip.stdout[j];
	        if (j === 0) {
	          ev[0] += 2;
	        }
	        combined.stdout.push(ev);
	        j++;
	      }
	      seen_duration += clip.duration;
	      i++;
	    }
	    combined.duration = seen_duration;
	    return asciinema_player.core.CreatePlayer(id, JSON.stringify(combined), {
	      'width': combined.width,
	      'height': combined.height,
	      'autoPlay': true,
	      'loop': true
	    });
	  }, 'text');
	};

	function caption_for_video(target) {
	  return $(target).parent().parent().find('.Shared-Video-caption');
	};

	function play_html5_video(target, url, type, meta) {
	  var caption, el, play, playing, updateCaption;
	  if ($(target).hasClass("has-video")) {
	    el = $(target).next();
	    return el[0].play();
	  } else {
	    el = $("<video><source /></video>");
	    el.attr({
	      loop: true
	    });
	    el.get()[0].volume = 0;
	    el.find("source").attr({
	      src: url,
	      type: type
	    });
	    el.attr("poster", $(target).attr("src"));
	    el.hide();
	    caption = caption_for_video(target);
	    updateCaption = function updateCaption() {
	      var e, k, len, ref, results, seen, t;
	      if (!(meta != null ? meta.episodes : void 0)) {
	        return;
	      }
	      t = el[0].currentTime;
	      seen = 0;
	      ref = meta.episodes;
	      results = [];
	      for (k = 0, len = ref.length; k < len; k++) {
	        e = ref[k];
	        seen += e.duration;
	        if (seen > t) {
	          caption.show().text("Episode " + e.episode_id);
	          break;
	        } else {
	          results.push(void 0);
	        }
	      }
	      return results;
	    };
	    el.on('timeupdate', updateCaption);
	    playing = false;
	    play = function play() {
	      playing = true;
	      el.show();
	      $(target).hide();
	      return el[0].play();
	    };
	    el[0].addEventListener('canplaythrough', play, false);
	    el.insertAfter(target);
	    return $(target).addClass("has-video");
	  }
	};

	function pause_html5_video(target) {
	  var el;
	  $(target).show();
	  el = $(target).next();
	  el.remove();
	  return $(target).removeClass("has-video");
	};

	function initResponsiveVideoSwaps(videos, onChange) {
	  var handlers, isElementInViewport, onVisibilityChange, pageVisible, registerPageVisibilityTrigger;
	  pageVisible = true;
	  handlers = [];
	  isElementInViewport = function isElementInViewport(el) {
	    var rect;
	    if (!pageVisible) {
	      return false;
	    }
	    if (!$(el).parent().is(':visible')) {
	      return false;
	    }
	    rect = $(el).parent()[0].getBoundingClientRect();
	    return rect.bottom >= 0 && rect.right >= 0 && rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.left <= (window.innerWidth || document.documentElement.clientWidth);
	  };
	  onVisibilityChange = function onVisibilityChange(el, callback) {
	    var old_visible;
	    old_visible = null;
	    return function () {
	      var visible;
	      visible = isElementInViewport(el);
	      if (visible !== old_visible) {
	        old_visible = visible;
	        if (typeof callback === 'function') {
	          callback(visible);
	        }
	      }
	    };
	  };
	  registerPageVisibilityTrigger = function registerPageVisibilityTrigger(edge_callback) {
	    var handleVisibilityChange, hidden, videoElement, visibilityChange;
	    hidden = void 0;
	    visibilityChange = void 0;
	    handleVisibilityChange = function handleVisibilityChange() {
	      if (document[hidden]) {
	        pageVisible = false;
	      } else {
	        pageVisible = true;
	      }
	      edge_callback();
	    };
	    if (typeof document.hidden !== 'undefined') {
	      hidden = 'hidden';
	      visibilityChange = 'visibilitychange';
	    } else if (typeof document.mozHidden !== 'undefined') {
	      hidden = 'mozHidden';
	      visibilityChange = 'mozvisibilitychange';
	    } else if (typeof document.msHidden !== 'undefined') {
	      hidden = 'msHidden';
	      visibilityChange = 'msvisibilitychange';
	    } else if (typeof document.webkitHidden !== 'undefined') {
	      hidden = 'webkitHidden';
	      visibilityChange = 'webkitvisibilitychange';
	    }
	    videoElement = document.getElementById('videoElement');
	    if (typeof document.addEventListener === 'undefined' || typeof document[hidden] === 'undefined') {} else {
	      document.addEventListener(visibilityChange, handleVisibilityChange, false);
	    }
	  };
	  $(videos).each(function () {
	    var handleChange, video;
	    video = this;
	    handleChange = function handleChange(visible_now) {
	      return onChange(video, visible_now);
	    };
	    handlers.push(onVisibilityChange(video, handleChange));
	  });
	  window.updateVideoVisibility = function () {
	    var i;
	    i = 0;
	    while (i < handlers.length) {
	      handlers[i]();
	      i++;
	    }
	  };
	  window.requestAnimationFrame(window.updateVideoVisibility);
	  window.setTimeout(function () {
	    window.updateVideoVisibility();
	  }, 100);
	  $(window).on('scroll', function () {
	    return window.requestAnimationFrame(window.updateVideoVisibility);
	  });
	  return registerPageVisibilityTrigger(window.updateVideoVisibility);
	};

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = { start: start };

	function start() {

	  var isAnimating = false;
	  var currentIndex = parseInt($('.GalleryEntry--previous').next().attr('data-index'));

	  var $entryContainer = $('.HomeGallery-entries');
	  var offset = 0;

	  var getEntry = function getEntry(index) {
	    return $entryContainer.find('.GalleryEntry').eq(index);
	  };

	  var lastEntryIndex = function lastEntryIndex() {
	    return $entryContainer.find('.GalleryEntry').length - 1;
	  };

	  var translateY = function translateY($el, Y) {
	    $el.css('transform', 'translateY(' + Y + 'px)');
	    $el.css('-webkit-transform', 'translateY(' + Y + 'px)');
	  };

	  var updateClasses = function updateClasses(activeIndex) {
	    $('.GalleryEntry--active').removeClass('GalleryEntry--active');
	    $('.GalleryEntry--previous').removeClass('GalleryEntry--previous');
	    $('.GalleryEntry--next').removeClass('GalleryEntry--next');

	    var $newActive = $('.GalleryEntry[data-index=' + activeIndex + ']');

	    $newActive.addClass('GalleryEntry--active');

	    $('.GalleryEntry').off('click.gallery');

	    var $prev = $newActive.prev();
	    $prev.addClass('GalleryEntry--previous');
	    $prev.on('click.gallery', function () {
	      moveBack(false);
	    });

	    var $next = $newActive.next();
	    $next.addClass('GalleryEntry--next');
	    $next.on('click.gallery', function () {
	      moveForward(false);
	    });
	  };

	  var focusVideo = function focusVideo(newIndex, animate) {
	    if (isAnimating) {
	      // console.log('already animating, cancelling')
	      return;
	    }
	    isAnimating = true;

	    var _lastEntryIndex = lastEntryIndex();
	    var direction = newIndex > currentIndex ? 'down' : 'up';

	    if (newIndex < 0) {
	      newIndex = _lastEntryIndex;
	    }

	    if (newIndex > _lastEntryIndex) {
	      newIndex = 0;
	    }

	    if (newIndex == currentIndex) {
	      // console.log('already same')
	      return;
	    }

	    updateClasses(newIndex);

	    // Play the new incoming videos
	    $(".GalleryEntry--previous, .GalleryEntry--next").find('video').each(function () {
	      this.play();
	    });

	    // How much to move
	    // TODO: This'll break once they are variable height
	    var newEntry = getEntry(newIndex);
	    var delta = newEntry.outerHeight();

	    // var delta = getEntry(currentIndex).position().top - getEntry(currentIndex).next().position().top

	    if (direction == 'down') {
	      delta = -delta;
	    }

	    // console.log('delta is: ' + delta)

	    // Animate container
	    $entryContainer.addClass('HomeGallery-entires--animatable');

	    // Update DOM after animation completes
	    var animationCallback = function animationCallback() {

	      // Clean up after animation
	      $entryContainer.removeClass('HomeGallery-entires--animatable');
	      translateY($entryContainer, 0);

	      // If we move down, move first element to the end
	      if (direction == 'down') {
	        var firstEntry = getEntry(0);
	        firstEntry.detach();
	        $entryContainer.append(firstEntry);

	        setTimeout(function () {
	          $("video", firstEntry).get(0).play();
	        }, 100);

	        // Otherwise, the inverse
	      } else {
	        var lastEntry = getEntry(lastEntryIndex());
	        lastEntry.detach();
	        $entryContainer.prepend(lastEntry);

	        setTimeout(function () {
	          $("video", lastEntry).get(0).play();
	        }, 100);
	      }

	      // Play videos again
	      // Pause any videos outside of the viewport
	      // $(".GalleryEntry:not(.GalleryEntry--active, .GalleryEntry--previous, .GalleryEntry--next)").each(function () {
	      //   $(this).find('video').each(function() {
	      //     this.pause();
	      //   });
	      // });


	      $('.HomeGallery').removeClass('HomeGallery--slowTransition');

	      isAnimating = false;
	    };
	    $entryContainer.one('otransitionend oTransitionEnd msTransitionEnd transitionend', animationCallback);

	    // Fire animation
	    setTimeout(function () {
	      translateY($entryContainer, delta);
	    });

	    // Update index
	    currentIndex = newIndex;
	  };

	  var moveForward = function moveForward(slow) {
	    if (slow) {
	      // console.log('slow is: ' + slow)
	      $('.HomeGallery').addClass('HomeGallery--slowTransition');
	    }

	    resetCycle();
	    focusVideo(currentIndex + 1, true);
	  };

	  $('.HomeGallery-prevControl').click(function () {
	    moveBack();
	  });

	  var moveBack = function moveBack() {
	    resetCycle();
	    focusVideo(currentIndex - 1, true);
	  };

	  $('.HomeGallery-nextControl').click(function () {
	    moveForward();
	  });

	  updateClasses(currentIndex);

	  // $('.HomeGallery--starting-positions').css('border', '3px solid red')
	  $('.HomeGallery--starting-positions').removeClass('HomeGallery--starting-positions');

	  // Auto cycling
	  var interval;
	  var scheduleCycle = function scheduleCycle() {

	    interval = setInterval(function () {

	      if (window._cancelGalleryCycle == true) {
	        console.log('cancelling');
	        clearInterval(interval);
	        return;
	      }

	      moveForward(true);
	      // console.log('fired interval')
	    }, 6000);
	  };

	  var resetCycle = function resetCycle() {
	    clearInterval(interval);
	    scheduleCycle();
	  };

	  // window._cancelGalleryCycle = true;

	  scheduleCycle();
	}

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = { setup: setup };

	function setup() {
	  var category_from_hash = window.location.hash.replace(/[^\w_-]/gi, '');
	  if (category_from_hash == '') activate('classic_control');else activate(category_from_hash);

	  $('a.EnvironmentsList-Nav-item').click(function (e) {
	    var href = $(this).attr('href');
	    if (href[0] == "#") {
	      e.preventDefault();
	      activate(href.substring(1));
	    }
	  });
	}

	function activate(element, quiet) {
	  var link = $('#link-' + element);
	  var activeClass = 'EnvironmentsList-Nav-item--active';
	  $('.' + activeClass).removeClass(activeClass);
	  $(link).addClass(activeClass);

	  if (!quiet) {
	    var group = $('#group-' + element);
	    if (group.length === 0) {
	      return;
	    }

	    $('.EnvironmentsList-Group').hide();
	    group.show();

	    window.location.hash = element;

	    if (window.updateVideoVisibility) {
	      window.updateVideoVisibility();
	    }
	  }
	}

/***/ })
/******/ ]);